# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

#################################################################################
#                      OneBranch Pipelines - PR Build                           #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################

# https://aka.ms/obpipelines/triggers
trigger:
  ## disable batching of changes when a push happens.
  batch: false
  branches:
    include:
    - main

pr:
- main

schedules:
- cron: '00 21 * * *'
  displayName: Schedule CI/CD
  branches:
    include:
    - main
  always: true

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 0
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none

  WindowsContainerImage: 'cdpxwin1809.azurecr.io/global/vse2022:latest' # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main


jobs:

# regular
# Always run this job.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'BatchedCI', 'IndividualCI', 'Schedule') }}:
  - template: ./ob-reusable-build.yml
    parameters:
      name: regular
      build_artifact: Build-x64
      generate_release_package: true
      build_nuget: true

# cmake
# Always run this job.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'BatchedCI', 'IndividualCI', 'Schedule') }}:
  - template: ./ob-reusable-cmake-build.yml
    parameters:
      build_artifact: Build-x64-cmake

# libfuzzer
# Always run this job.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'BatchedCI', 'IndividualCI', 'Schedule') }}:
  - template: ./ob-reusable-build.yml
    parameters:
      name: libfuzzer
      build_artifact: Build-x64-fuzzer
      cxx_flags: '/fsanitize-coverage=inline-bool-flag /fsanitize-coverage=edge /fsanitize-coverage=trace-cmp /fsanitize-coverage=trace-div /ZH:SHA_256'
      ld_flags: '"clang_rt.fuzzer_MDd-x86_64.lib" "libsancov.lib"'
      build_options: /p:Fuzzer='True' /t:tests\libfuzzer\execution_context_fuzzer /t:tests\libfuzzer\bpf2c_fuzzer /t:tests\libfuzzer\verifier_fuzzer /t:tests\libfuzzer\core_helper_fuzzer

# unit_tests
# Always run this job.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'BatchedCI', 'IndividualCI', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: unit_tests
      test_command: '.\unit_tests.exe -d yes'
      dependency: regular
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: true
      gather_dumps: true
      capture_etw: true

# bpf2c
# Always run this job.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'BatchedCI', 'IndividualCI', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: bpf2c
      test_command: '.\bpf2c_tests.exe -d yes'
      dependency: regular
      build_artifact: Build-x64
      environment: windows-2022
      vs_dev: true
      code_coverage: true
      gather_dumps: true
      capture_etw: true

# bpf2c_conformance
# Always run this job.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'BatchedCI', 'IndividualCI', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: bpf2c_conformance
      pre_test: 'powershell.exe Invoke-WebRequest https://github.com/Alan-Jowett/bpf_conformance/releases/download/v0.0.3/bpf_conformance_runner.exe -OutFile bpf_conformance_runner.exe'
      test_command: '.\bpf_conformance_runner.exe --test_file_directory $(Build.SourcesDirectory)\$(PROJECT_NAME)\external\bpf_conformance\tests --plugin_path bpf2c_plugin.exe --cpu_version v2 --debug true --plugin_options "--include $(Build.SourcesDirectory)\$(PROJECT_NAME)\include"'
      dependency: regular
      build_artifact: Build-x64
      environment: windows-2022
      vs_dev: true
      code_coverage: true
      gather_dumps: true
      capture_etw: true

# Run the low memory simulator.
# Always run this job.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'BatchedCI', 'IndividualCI', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: low_memory
      test_command: '.\unit_tests.exe'
      dependency: regular
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: true
      gather_dumps: true
      low_memory: true

# Additional jobs to run on pull and schedule only (skip push).
# ---------------------------------------------------------------------------
# Build with C++ static analyzer.
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-build.yml
    parameters:
      name: analyze
      build_artifact: Build-x64-Analyze
      # Analysis on external projects is conditional, as on small CI/CD VMs the compiler can run OOM
      build_options: /p:Analysis='True' /p:AnalysisOnExternal='False'

# Build with C++ address sanitizer.
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-build.yml
    parameters:
      name: sanitize
      build_artifact: Build-x64-Sanitize
      build_options: /p:AddressSanitizer='True'

# fuzzing
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: fuzzing
      test_command: '.\fuzz.exe -d yes'
      dependency: sanitize
      build_artifact: Build-x64-Sanitize
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

# bpf2c_fuzzer
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: bpf2c_fuzzer
      test_command: '.\bpf2c_fuzzer.exe bpf2c_fuzzer_corpus -use_value_profile=1 -max_total_time=900 -artifact_prefix=Artifacts\'
      dependency: libfuzzer
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

# execution_context_fuzzer
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: execution_context_fuzzer
      test_command: '.\execution_context_fuzzer.exe execution_context_fuzzer_corpus -use_value_profile=1 -runs=3000 -artifact_prefix=Artifacts\'
      dependency: libfuzzer
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

# Run the verifier fuzzer.
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: verifier_fuzzer
      test_command: '.\verifier_fuzzer.exe verifier_corpus -use_value_profile=1 -max_total_time=900 -artifact_prefix=Artifacts\'
      dependency: libfuzzer
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

# core_helper_fuzzer
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: core_helper_fuzzer
      test_command: '.\core_helper_fuzzer core_helper_corpus -max_len=139 -runs=1000 -use_value_profile=1 -artifact_prefix=Artifacts\'
      dependency: libfuzzer
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

# Run the quick stress tests
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: stress
      test_command: '.\ebpf_performance.exe'
      dependency: regular
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

# Run the unit tests with address sanitizer.
# Only run on schedule and pull request.
- ${{ if in(variables['Build.Reason'], 'PullRequest', 'Schedule') }}:
  - template: ./ob-reusable-test.yml
    parameters:
      name: sanitize_unit_tests
      test_command: '.\unit_tests.exe -d yes'
      dependency: sanitize
      build_artifact: Build-x64-Sanitize
      environment: windows-2022
      gather_dumps: true
      capture_etw: true
